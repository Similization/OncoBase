// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/mock.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	model "med/pkg/model"
	services "med/pkg/service"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccount is a mock of Account interface.
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount.
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance.
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), email, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (*services.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(*services.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockBloodCount is a mock of BloodCount interface.
type MockBloodCount struct {
	ctrl     *gomock.Controller
	recorder *MockBloodCountMockRecorder
}

// MockBloodCountMockRecorder is the mock recorder for MockBloodCount.
type MockBloodCountMockRecorder struct {
	mock *MockBloodCount
}

// NewMockBloodCount creates a new mock instance.
func NewMockBloodCount(ctrl *gomock.Controller) *MockBloodCount {
	mock := &MockBloodCount{ctrl: ctrl}
	mock.recorder = &MockBloodCountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBloodCount) EXPECT() *MockBloodCountMockRecorder {
	return m.recorder
}

// CreateBloodCount mocks base method.
func (m *MockBloodCount) CreateBloodCount(bloodCount model.BloodCount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBloodCount", bloodCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBloodCount indicates an expected call of CreateBloodCount.
func (mr *MockBloodCountMockRecorder) CreateBloodCount(bloodCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBloodCount", reflect.TypeOf((*MockBloodCount)(nil).CreateBloodCount), bloodCount)
}

// DeleteBloodCount mocks base method.
func (m *MockBloodCount) DeleteBloodCount(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBloodCount", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBloodCount indicates an expected call of DeleteBloodCount.
func (mr *MockBloodCountMockRecorder) DeleteBloodCount(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBloodCount", reflect.TypeOf((*MockBloodCount)(nil).DeleteBloodCount), id)
}

// GetBloodCountById mocks base method.
func (m *MockBloodCount) GetBloodCountById(id string) (model.BloodCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloodCountById", id)
	ret0, _ := ret[0].(model.BloodCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBloodCountById indicates an expected call of GetBloodCountById.
func (mr *MockBloodCountMockRecorder) GetBloodCountById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloodCountById", reflect.TypeOf((*MockBloodCount)(nil).GetBloodCountById), id)
}

// GetBloodCountList mocks base method.
func (m *MockBloodCount) GetBloodCountList() ([]model.BloodCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloodCountList")
	ret0, _ := ret[0].([]model.BloodCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBloodCountList indicates an expected call of GetBloodCountList.
func (mr *MockBloodCountMockRecorder) GetBloodCountList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloodCountList", reflect.TypeOf((*MockBloodCount)(nil).GetBloodCountList))
}

// UpdateBloodCount mocks base method.
func (m *MockBloodCount) UpdateBloodCount(bloodCount model.BloodCount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBloodCount", bloodCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBloodCount indicates an expected call of UpdateBloodCount.
func (mr *MockBloodCountMockRecorder) UpdateBloodCount(bloodCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBloodCount", reflect.TypeOf((*MockBloodCount)(nil).UpdateBloodCount), bloodCount)
}

// MockBloodCountValue is a mock of BloodCountValue interface.
type MockBloodCountValue struct {
	ctrl     *gomock.Controller
	recorder *MockBloodCountValueMockRecorder
}

// MockBloodCountValueMockRecorder is the mock recorder for MockBloodCountValue.
type MockBloodCountValueMockRecorder struct {
	mock *MockBloodCountValue
}

// NewMockBloodCountValue creates a new mock instance.
func NewMockBloodCountValue(ctrl *gomock.Controller) *MockBloodCountValue {
	mock := &MockBloodCountValue{ctrl: ctrl}
	mock.recorder = &MockBloodCountValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBloodCountValue) EXPECT() *MockBloodCountValueMockRecorder {
	return m.recorder
}

// CreateBloodCountValue mocks base method.
func (m *MockBloodCountValue) CreateBloodCountValue(bloodCountValue model.BloodCountValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBloodCountValue", bloodCountValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBloodCountValue indicates an expected call of CreateBloodCountValue.
func (mr *MockBloodCountValueMockRecorder) CreateBloodCountValue(bloodCountValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBloodCountValue", reflect.TypeOf((*MockBloodCountValue)(nil).CreateBloodCountValue), bloodCountValue)
}

// DeleteBloodCountValue mocks base method.
func (m *MockBloodCountValue) DeleteBloodCountValue(diseaseId, bloodCountId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBloodCountValue", diseaseId, bloodCountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBloodCountValue indicates an expected call of DeleteBloodCountValue.
func (mr *MockBloodCountValueMockRecorder) DeleteBloodCountValue(diseaseId, bloodCountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBloodCountValue", reflect.TypeOf((*MockBloodCountValue)(nil).DeleteBloodCountValue), diseaseId, bloodCountId)
}

// GetBloodCountValueById mocks base method.
func (m *MockBloodCountValue) GetBloodCountValueById(diseaseId, bloodCountId string) (model.BloodCountValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloodCountValueById", diseaseId, bloodCountId)
	ret0, _ := ret[0].(model.BloodCountValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBloodCountValueById indicates an expected call of GetBloodCountValueById.
func (mr *MockBloodCountValueMockRecorder) GetBloodCountValueById(diseaseId, bloodCountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloodCountValueById", reflect.TypeOf((*MockBloodCountValue)(nil).GetBloodCountValueById), diseaseId, bloodCountId)
}

// GetBloodCountValueList mocks base method.
func (m *MockBloodCountValue) GetBloodCountValueList() ([]model.BloodCountValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloodCountValueList")
	ret0, _ := ret[0].([]model.BloodCountValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBloodCountValueList indicates an expected call of GetBloodCountValueList.
func (mr *MockBloodCountValueMockRecorder) GetBloodCountValueList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloodCountValueList", reflect.TypeOf((*MockBloodCountValue)(nil).GetBloodCountValueList))
}

// GetBloodCountValueListByBloodCount mocks base method.
func (m *MockBloodCountValue) GetBloodCountValueListByBloodCount(bloodCountId string) ([]model.BloodCountValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloodCountValueListByBloodCount", bloodCountId)
	ret0, _ := ret[0].([]model.BloodCountValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBloodCountValueListByBloodCount indicates an expected call of GetBloodCountValueListByBloodCount.
func (mr *MockBloodCountValueMockRecorder) GetBloodCountValueListByBloodCount(bloodCountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloodCountValueListByBloodCount", reflect.TypeOf((*MockBloodCountValue)(nil).GetBloodCountValueListByBloodCount), bloodCountId)
}

// GetBloodCountValueListByDisease mocks base method.
func (m *MockBloodCountValue) GetBloodCountValueListByDisease(diseaseId string) ([]model.BloodCountValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBloodCountValueListByDisease", diseaseId)
	ret0, _ := ret[0].([]model.BloodCountValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBloodCountValueListByDisease indicates an expected call of GetBloodCountValueListByDisease.
func (mr *MockBloodCountValueMockRecorder) GetBloodCountValueListByDisease(diseaseId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBloodCountValueListByDisease", reflect.TypeOf((*MockBloodCountValue)(nil).GetBloodCountValueListByDisease), diseaseId)
}

// UpdateBloodCountValue mocks base method.
func (m *MockBloodCountValue) UpdateBloodCountValue(bloodCountValue model.BloodCountValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBloodCountValue", bloodCountValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBloodCountValue indicates an expected call of UpdateBloodCountValue.
func (mr *MockBloodCountValueMockRecorder) UpdateBloodCountValue(bloodCountValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBloodCountValue", reflect.TypeOf((*MockBloodCountValue)(nil).UpdateBloodCountValue), bloodCountValue)
}

// MockCourse is a mock of Course interface.
type MockCourse struct {
	ctrl     *gomock.Controller
	recorder *MockCourseMockRecorder
}

// MockCourseMockRecorder is the mock recorder for MockCourse.
type MockCourseMockRecorder struct {
	mock *MockCourse
}

// NewMockCourse creates a new mock instance.
func NewMockCourse(ctrl *gomock.Controller) *MockCourse {
	mock := &MockCourse{ctrl: ctrl}
	mock.recorder = &MockCourseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourse) EXPECT() *MockCourseMockRecorder {
	return m.recorder
}

// CreateCourse mocks base method.
func (m *MockCourse) CreateCourse(course model.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", course)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockCourseMockRecorder) CreateCourse(course any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockCourse)(nil).CreateCourse), course)
}

// DeleteCourse mocks base method.
func (m *MockCourse) DeleteCourse(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourse", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourse indicates an expected call of DeleteCourse.
func (mr *MockCourseMockRecorder) DeleteCourse(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourse", reflect.TypeOf((*MockCourse)(nil).DeleteCourse), id)
}

// GetCourseById mocks base method.
func (m *MockCourse) GetCourseById(id string) (model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseById", id)
	ret0, _ := ret[0].(model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseById indicates an expected call of GetCourseById.
func (mr *MockCourseMockRecorder) GetCourseById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseById", reflect.TypeOf((*MockCourse)(nil).GetCourseById), id)
}

// GetCourseList mocks base method.
func (m *MockCourse) GetCourseList() ([]model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseList")
	ret0, _ := ret[0].([]model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseList indicates an expected call of GetCourseList.
func (mr *MockCourseMockRecorder) GetCourseList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseList", reflect.TypeOf((*MockCourse)(nil).GetCourseList))
}

// UpdateCourse mocks base method.
func (m *MockCourse) UpdateCourse(course model.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", course)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockCourseMockRecorder) UpdateCourse(course any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockCourse)(nil).UpdateCourse), course)
}

// MockCourseProcedure is a mock of CourseProcedure interface.
type MockCourseProcedure struct {
	ctrl     *gomock.Controller
	recorder *MockCourseProcedureMockRecorder
}

// MockCourseProcedureMockRecorder is the mock recorder for MockCourseProcedure.
type MockCourseProcedureMockRecorder struct {
	mock *MockCourseProcedure
}

// NewMockCourseProcedure creates a new mock instance.
func NewMockCourseProcedure(ctrl *gomock.Controller) *MockCourseProcedure {
	mock := &MockCourseProcedure{ctrl: ctrl}
	mock.recorder = &MockCourseProcedureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseProcedure) EXPECT() *MockCourseProcedureMockRecorder {
	return m.recorder
}

// CreateCourseProcedure mocks base method.
func (m *MockCourseProcedure) CreateCourseProcedure(courseProcedure model.CourseProcedure) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseProcedure", courseProcedure)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourseProcedure indicates an expected call of CreateCourseProcedure.
func (mr *MockCourseProcedureMockRecorder) CreateCourseProcedure(courseProcedure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseProcedure", reflect.TypeOf((*MockCourseProcedure)(nil).CreateCourseProcedure), courseProcedure)
}

// DeleteCourseProcedure mocks base method.
func (m *MockCourseProcedure) DeleteCourseProcedure(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseProcedure", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseProcedure indicates an expected call of DeleteCourseProcedure.
func (mr *MockCourseProcedureMockRecorder) DeleteCourseProcedure(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseProcedure", reflect.TypeOf((*MockCourseProcedure)(nil).DeleteCourseProcedure), id)
}

// GetCourseProcedureById mocks base method.
func (m *MockCourseProcedure) GetCourseProcedureById(id string) (model.CourseProcedure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseProcedureById", id)
	ret0, _ := ret[0].(model.CourseProcedure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseProcedureById indicates an expected call of GetCourseProcedureById.
func (mr *MockCourseProcedureMockRecorder) GetCourseProcedureById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseProcedureById", reflect.TypeOf((*MockCourseProcedure)(nil).GetCourseProcedureById), id)
}

// GetCourseProcedureList mocks base method.
func (m *MockCourseProcedure) GetCourseProcedureList() ([]model.CourseProcedure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseProcedureList")
	ret0, _ := ret[0].([]model.CourseProcedure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseProcedureList indicates an expected call of GetCourseProcedureList.
func (mr *MockCourseProcedureMockRecorder) GetCourseProcedureList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseProcedureList", reflect.TypeOf((*MockCourseProcedure)(nil).GetCourseProcedureList))
}

// UpdateCourseProcedure mocks base method.
func (m *MockCourseProcedure) UpdateCourseProcedure(courseProcedure model.CourseProcedure) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseProcedure", courseProcedure)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseProcedure indicates an expected call of UpdateCourseProcedure.
func (mr *MockCourseProcedureMockRecorder) UpdateCourseProcedure(courseProcedure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseProcedure", reflect.TypeOf((*MockCourseProcedure)(nil).UpdateCourseProcedure), courseProcedure)
}

// MockDiagnosis is a mock of Diagnosis interface.
type MockDiagnosis struct {
	ctrl     *gomock.Controller
	recorder *MockDiagnosisMockRecorder
}

// MockDiagnosisMockRecorder is the mock recorder for MockDiagnosis.
type MockDiagnosisMockRecorder struct {
	mock *MockDiagnosis
}

// NewMockDiagnosis creates a new mock instance.
func NewMockDiagnosis(ctrl *gomock.Controller) *MockDiagnosis {
	mock := &MockDiagnosis{ctrl: ctrl}
	mock.recorder = &MockDiagnosisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiagnosis) EXPECT() *MockDiagnosisMockRecorder {
	return m.recorder
}

// CreateDiagnosis mocks base method.
func (m *MockDiagnosis) CreateDiagnosis(diagnosis model.Diagnosis) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiagnosis", diagnosis)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiagnosis indicates an expected call of CreateDiagnosis.
func (mr *MockDiagnosisMockRecorder) CreateDiagnosis(diagnosis any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiagnosis", reflect.TypeOf((*MockDiagnosis)(nil).CreateDiagnosis), diagnosis)
}

// DeleteDiagnosis mocks base method.
func (m *MockDiagnosis) DeleteDiagnosis(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiagnosis", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiagnosis indicates an expected call of DeleteDiagnosis.
func (mr *MockDiagnosisMockRecorder) DeleteDiagnosis(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiagnosis", reflect.TypeOf((*MockDiagnosis)(nil).DeleteDiagnosis), id)
}

// GetDiagnosisById mocks base method.
func (m *MockDiagnosis) GetDiagnosisById(id string) (model.Diagnosis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiagnosisById", id)
	ret0, _ := ret[0].(model.Diagnosis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiagnosisById indicates an expected call of GetDiagnosisById.
func (mr *MockDiagnosisMockRecorder) GetDiagnosisById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiagnosisById", reflect.TypeOf((*MockDiagnosis)(nil).GetDiagnosisById), id)
}

// GetDiagnosisList mocks base method.
func (m *MockDiagnosis) GetDiagnosisList() ([]model.Diagnosis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiagnosisList")
	ret0, _ := ret[0].([]model.Diagnosis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiagnosisList indicates an expected call of GetDiagnosisList.
func (mr *MockDiagnosisMockRecorder) GetDiagnosisList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiagnosisList", reflect.TypeOf((*MockDiagnosis)(nil).GetDiagnosisList))
}

// UpdateDiagnosis mocks base method.
func (m *MockDiagnosis) UpdateDiagnosis(diagnosis model.Diagnosis) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiagnosis", diagnosis)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiagnosis indicates an expected call of UpdateDiagnosis.
func (mr *MockDiagnosisMockRecorder) UpdateDiagnosis(diagnosis any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiagnosis", reflect.TypeOf((*MockDiagnosis)(nil).UpdateDiagnosis), diagnosis)
}

// MockDisease is a mock of Disease interface.
type MockDisease struct {
	ctrl     *gomock.Controller
	recorder *MockDiseaseMockRecorder
}

// MockDiseaseMockRecorder is the mock recorder for MockDisease.
type MockDiseaseMockRecorder struct {
	mock *MockDisease
}

// NewMockDisease creates a new mock instance.
func NewMockDisease(ctrl *gomock.Controller) *MockDisease {
	mock := &MockDisease{ctrl: ctrl}
	mock.recorder = &MockDiseaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisease) EXPECT() *MockDiseaseMockRecorder {
	return m.recorder
}

// CreateDisease mocks base method.
func (m *MockDisease) CreateDisease(disease model.Disease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisease", disease)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDisease indicates an expected call of CreateDisease.
func (mr *MockDiseaseMockRecorder) CreateDisease(disease any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisease", reflect.TypeOf((*MockDisease)(nil).CreateDisease), disease)
}

// DeleteDisease mocks base method.
func (m *MockDisease) DeleteDisease(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisease", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDisease indicates an expected call of DeleteDisease.
func (mr *MockDiseaseMockRecorder) DeleteDisease(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisease", reflect.TypeOf((*MockDisease)(nil).DeleteDisease), id)
}

// GetDiseaseById mocks base method.
func (m *MockDisease) GetDiseaseById(id string) (model.Disease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiseaseById", id)
	ret0, _ := ret[0].(model.Disease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiseaseById indicates an expected call of GetDiseaseById.
func (mr *MockDiseaseMockRecorder) GetDiseaseById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiseaseById", reflect.TypeOf((*MockDisease)(nil).GetDiseaseById), id)
}

// GetDiseaseList mocks base method.
func (m *MockDisease) GetDiseaseList() ([]model.Disease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiseaseList")
	ret0, _ := ret[0].([]model.Disease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiseaseList indicates an expected call of GetDiseaseList.
func (mr *MockDiseaseMockRecorder) GetDiseaseList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiseaseList", reflect.TypeOf((*MockDisease)(nil).GetDiseaseList))
}

// UpdateDisease mocks base method.
func (m *MockDisease) UpdateDisease(disease model.Disease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDisease", disease)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDisease indicates an expected call of UpdateDisease.
func (mr *MockDiseaseMockRecorder) UpdateDisease(disease any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDisease", reflect.TypeOf((*MockDisease)(nil).UpdateDisease), disease)
}

// MockDoctor is a mock of Doctor interface.
type MockDoctor struct {
	ctrl     *gomock.Controller
	recorder *MockDoctorMockRecorder
}

// MockDoctorMockRecorder is the mock recorder for MockDoctor.
type MockDoctorMockRecorder struct {
	mock *MockDoctor
}

// NewMockDoctor creates a new mock instance.
func NewMockDoctor(ctrl *gomock.Controller) *MockDoctor {
	mock := &MockDoctor{ctrl: ctrl}
	mock.recorder = &MockDoctorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoctor) EXPECT() *MockDoctorMockRecorder {
	return m.recorder
}

// CreateDoctor mocks base method.
func (m *MockDoctor) CreateDoctor(doctor model.Doctor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoctor", doctor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDoctor indicates an expected call of CreateDoctor.
func (mr *MockDoctorMockRecorder) CreateDoctor(doctor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoctor", reflect.TypeOf((*MockDoctor)(nil).CreateDoctor), doctor)
}

// DeleteDoctor mocks base method.
func (m *MockDoctor) DeleteDoctor(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDoctor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDoctor indicates an expected call of DeleteDoctor.
func (mr *MockDoctorMockRecorder) DeleteDoctor(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDoctor", reflect.TypeOf((*MockDoctor)(nil).DeleteDoctor), id)
}

// GetDoctorById mocks base method.
func (m *MockDoctor) GetDoctorById(id int) (model.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorById", id)
	ret0, _ := ret[0].(model.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorById indicates an expected call of GetDoctorById.
func (mr *MockDoctorMockRecorder) GetDoctorById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorById", reflect.TypeOf((*MockDoctor)(nil).GetDoctorById), id)
}

// GetDoctorList mocks base method.
func (m *MockDoctor) GetDoctorList() ([]model.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorList")
	ret0, _ := ret[0].([]model.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorList indicates an expected call of GetDoctorList.
func (mr *MockDoctorMockRecorder) GetDoctorList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorList", reflect.TypeOf((*MockDoctor)(nil).GetDoctorList))
}

// UpdateDoctor mocks base method.
func (m *MockDoctor) UpdateDoctor(doctor model.Doctor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDoctor", doctor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDoctor indicates an expected call of UpdateDoctor.
func (mr *MockDoctorMockRecorder) UpdateDoctor(doctor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDoctor", reflect.TypeOf((*MockDoctor)(nil).UpdateDoctor), doctor)
}

// MockDoctorPatient is a mock of DoctorPatient interface.
type MockDoctorPatient struct {
	ctrl     *gomock.Controller
	recorder *MockDoctorPatientMockRecorder
}

// MockDoctorPatientMockRecorder is the mock recorder for MockDoctorPatient.
type MockDoctorPatientMockRecorder struct {
	mock *MockDoctorPatient
}

// NewMockDoctorPatient creates a new mock instance.
func NewMockDoctorPatient(ctrl *gomock.Controller) *MockDoctorPatient {
	mock := &MockDoctorPatient{ctrl: ctrl}
	mock.recorder = &MockDoctorPatientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoctorPatient) EXPECT() *MockDoctorPatientMockRecorder {
	return m.recorder
}

// CreateDoctorPatient mocks base method.
func (m *MockDoctorPatient) CreateDoctorPatient(doctorPatient model.DoctorPatient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoctorPatient", doctorPatient)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDoctorPatient indicates an expected call of CreateDoctorPatient.
func (mr *MockDoctorPatientMockRecorder) CreateDoctorPatient(doctorPatient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoctorPatient", reflect.TypeOf((*MockDoctorPatient)(nil).CreateDoctorPatient), doctorPatient)
}

// DeleteDoctorPatient mocks base method.
func (m *MockDoctorPatient) DeleteDoctorPatient(doctorId, patientId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDoctorPatient", doctorId, patientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDoctorPatient indicates an expected call of DeleteDoctorPatient.
func (mr *MockDoctorPatientMockRecorder) DeleteDoctorPatient(doctorId, patientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDoctorPatient", reflect.TypeOf((*MockDoctorPatient)(nil).DeleteDoctorPatient), doctorId, patientId)
}

// GetDoctorPatientListByDoctor mocks base method.
func (m *MockDoctorPatient) GetDoctorPatientListByDoctor(doctorId int) ([]model.DoctorPatient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorPatientListByDoctor", doctorId)
	ret0, _ := ret[0].([]model.DoctorPatient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorPatientListByDoctor indicates an expected call of GetDoctorPatientListByDoctor.
func (mr *MockDoctorPatientMockRecorder) GetDoctorPatientListByDoctor(doctorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorPatientListByDoctor", reflect.TypeOf((*MockDoctorPatient)(nil).GetDoctorPatientListByDoctor), doctorId)
}

// GetDoctorPatientListByPatient mocks base method.
func (m *MockDoctorPatient) GetDoctorPatientListByPatient(patientId int) ([]model.DoctorPatient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorPatientListByPatient", patientId)
	ret0, _ := ret[0].([]model.DoctorPatient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorPatientListByPatient indicates an expected call of GetDoctorPatientListByPatient.
func (mr *MockDoctorPatientMockRecorder) GetDoctorPatientListByPatient(patientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorPatientListByPatient", reflect.TypeOf((*MockDoctorPatient)(nil).GetDoctorPatientListByPatient), patientId)
}

// MockDrug is a mock of Drug interface.
type MockDrug struct {
	ctrl     *gomock.Controller
	recorder *MockDrugMockRecorder
}

// MockDrugMockRecorder is the mock recorder for MockDrug.
type MockDrugMockRecorder struct {
	mock *MockDrug
}

// NewMockDrug creates a new mock instance.
func NewMockDrug(ctrl *gomock.Controller) *MockDrug {
	mock := &MockDrug{ctrl: ctrl}
	mock.recorder = &MockDrugMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrug) EXPECT() *MockDrugMockRecorder {
	return m.recorder
}

// CreateDrug mocks base method.
func (m *MockDrug) CreateDrug(drug model.Drug) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDrug", drug)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDrug indicates an expected call of CreateDrug.
func (mr *MockDrugMockRecorder) CreateDrug(drug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDrug", reflect.TypeOf((*MockDrug)(nil).CreateDrug), drug)
}

// DeleteDrug mocks base method.
func (m *MockDrug) DeleteDrug(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDrug", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDrug indicates an expected call of DeleteDrug.
func (mr *MockDrugMockRecorder) DeleteDrug(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDrug", reflect.TypeOf((*MockDrug)(nil).DeleteDrug), id)
}

// GetDrugById mocks base method.
func (m *MockDrug) GetDrugById(id string) (model.Drug, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrugById", id)
	ret0, _ := ret[0].(model.Drug)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrugById indicates an expected call of GetDrugById.
func (mr *MockDrugMockRecorder) GetDrugById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrugById", reflect.TypeOf((*MockDrug)(nil).GetDrugById), id)
}

// GetDrugList mocks base method.
func (m *MockDrug) GetDrugList() ([]model.Drug, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrugList")
	ret0, _ := ret[0].([]model.Drug)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrugList indicates an expected call of GetDrugList.
func (mr *MockDrugMockRecorder) GetDrugList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrugList", reflect.TypeOf((*MockDrug)(nil).GetDrugList))
}

// UpdateDrug mocks base method.
func (m *MockDrug) UpdateDrug(drug model.Drug) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDrug", drug)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDrug indicates an expected call of UpdateDrug.
func (mr *MockDrugMockRecorder) UpdateDrug(drug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDrug", reflect.TypeOf((*MockDrug)(nil).UpdateDrug), drug)
}

// MockPatient is a mock of Patient interface.
type MockPatient struct {
	ctrl     *gomock.Controller
	recorder *MockPatientMockRecorder
}

// MockPatientMockRecorder is the mock recorder for MockPatient.
type MockPatientMockRecorder struct {
	mock *MockPatient
}

// NewMockPatient creates a new mock instance.
func NewMockPatient(ctrl *gomock.Controller) *MockPatient {
	mock := &MockPatient{ctrl: ctrl}
	mock.recorder = &MockPatientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatient) EXPECT() *MockPatientMockRecorder {
	return m.recorder
}

// CreatePatient mocks base method.
func (m *MockPatient) CreatePatient(patient model.Patient) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatient", patient)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatient indicates an expected call of CreatePatient.
func (mr *MockPatientMockRecorder) CreatePatient(patient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatient", reflect.TypeOf((*MockPatient)(nil).CreatePatient), patient)
}

// DeletePatient mocks base method.
func (m *MockPatient) DeletePatient(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatient", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatient indicates an expected call of DeletePatient.
func (mr *MockPatientMockRecorder) DeletePatient(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatient", reflect.TypeOf((*MockPatient)(nil).DeletePatient), id)
}

// GetPatientById mocks base method.
func (m *MockPatient) GetPatientById(id int) (model.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientById", id)
	ret0, _ := ret[0].(model.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientById indicates an expected call of GetPatientById.
func (mr *MockPatientMockRecorder) GetPatientById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientById", reflect.TypeOf((*MockPatient)(nil).GetPatientById), id)
}

// GetPatientList mocks base method.
func (m *MockPatient) GetPatientList() ([]model.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientList")
	ret0, _ := ret[0].([]model.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientList indicates an expected call of GetPatientList.
func (mr *MockPatientMockRecorder) GetPatientList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientList", reflect.TypeOf((*MockPatient)(nil).GetPatientList))
}

// UpdatePatient mocks base method.
func (m *MockPatient) UpdatePatient(patient model.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatient", patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatient indicates an expected call of UpdatePatient.
func (mr *MockPatientMockRecorder) UpdatePatient(patient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatient", reflect.TypeOf((*MockPatient)(nil).UpdatePatient), patient)
}

// MockPatientCourse is a mock of PatientCourse interface.
type MockPatientCourse struct {
	ctrl     *gomock.Controller
	recorder *MockPatientCourseMockRecorder
}

// MockPatientCourseMockRecorder is the mock recorder for MockPatientCourse.
type MockPatientCourseMockRecorder struct {
	mock *MockPatientCourse
}

// NewMockPatientCourse creates a new mock instance.
func NewMockPatientCourse(ctrl *gomock.Controller) *MockPatientCourse {
	mock := &MockPatientCourse{ctrl: ctrl}
	mock.recorder = &MockPatientCourseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientCourse) EXPECT() *MockPatientCourseMockRecorder {
	return m.recorder
}

// CreatePatientCourse mocks base method.
func (m *MockPatientCourse) CreatePatientCourse(patientCourse model.PatientCourse) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatientCourse", patientCourse)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientCourse indicates an expected call of CreatePatientCourse.
func (mr *MockPatientCourseMockRecorder) CreatePatientCourse(patientCourse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientCourse", reflect.TypeOf((*MockPatientCourse)(nil).CreatePatientCourse), patientCourse)
}

// DeletePatientCourse mocks base method.
func (m *MockPatientCourse) DeletePatientCourse(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatientCourse", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatientCourse indicates an expected call of DeletePatientCourse.
func (mr *MockPatientCourseMockRecorder) DeletePatientCourse(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientCourse", reflect.TypeOf((*MockPatientCourse)(nil).DeletePatientCourse), id)
}

// GetPatientCourseById mocks base method.
func (m *MockPatientCourse) GetPatientCourseById(id int) (model.PatientCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientCourseById", id)
	ret0, _ := ret[0].(model.PatientCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientCourseById indicates an expected call of GetPatientCourseById.
func (mr *MockPatientCourseMockRecorder) GetPatientCourseById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientCourseById", reflect.TypeOf((*MockPatientCourse)(nil).GetPatientCourseById), id)
}

// GetPatientCourseList mocks base method.
func (m *MockPatientCourse) GetPatientCourseList() ([]model.PatientCourse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientCourseList")
	ret0, _ := ret[0].([]model.PatientCourse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientCourseList indicates an expected call of GetPatientCourseList.
func (mr *MockPatientCourseMockRecorder) GetPatientCourseList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientCourseList", reflect.TypeOf((*MockPatientCourse)(nil).GetPatientCourseList))
}

// UpdatePatientCourse mocks base method.
func (m *MockPatientCourse) UpdatePatientCourse(patientCourse model.PatientCourse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientCourse", patientCourse)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatientCourse indicates an expected call of UpdatePatientCourse.
func (mr *MockPatientCourseMockRecorder) UpdatePatientCourse(patientCourse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientCourse", reflect.TypeOf((*MockPatientCourse)(nil).UpdatePatientCourse), patientCourse)
}

// MockPatientDisease is a mock of PatientDisease interface.
type MockPatientDisease struct {
	ctrl     *gomock.Controller
	recorder *MockPatientDiseaseMockRecorder
}

// MockPatientDiseaseMockRecorder is the mock recorder for MockPatientDisease.
type MockPatientDiseaseMockRecorder struct {
	mock *MockPatientDisease
}

// NewMockPatientDisease creates a new mock instance.
func NewMockPatientDisease(ctrl *gomock.Controller) *MockPatientDisease {
	mock := &MockPatientDisease{ctrl: ctrl}
	mock.recorder = &MockPatientDiseaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientDisease) EXPECT() *MockPatientDiseaseMockRecorder {
	return m.recorder
}

// CreatePatientDisease mocks base method.
func (m *MockPatientDisease) CreatePatientDisease(patientDisease model.PatientDisease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatientDisease", patientDisease)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePatientDisease indicates an expected call of CreatePatientDisease.
func (mr *MockPatientDiseaseMockRecorder) CreatePatientDisease(patientDisease any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientDisease", reflect.TypeOf((*MockPatientDisease)(nil).CreatePatientDisease), patientDisease)
}

// DeletePatientDisease mocks base method.
func (m *MockPatientDisease) DeletePatientDisease(patientId, diseaseId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatientDisease", patientId, diseaseId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatientDisease indicates an expected call of DeletePatientDisease.
func (mr *MockPatientDiseaseMockRecorder) DeletePatientDisease(patientId, diseaseId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientDisease", reflect.TypeOf((*MockPatientDisease)(nil).DeletePatientDisease), patientId, diseaseId)
}

// GetPatientDiseaseById mocks base method.
func (m *MockPatientDisease) GetPatientDiseaseById(patientId, diseaseId int) (model.PatientDisease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientDiseaseById", patientId, diseaseId)
	ret0, _ := ret[0].(model.PatientDisease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientDiseaseById indicates an expected call of GetPatientDiseaseById.
func (mr *MockPatientDiseaseMockRecorder) GetPatientDiseaseById(patientId, diseaseId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientDiseaseById", reflect.TypeOf((*MockPatientDisease)(nil).GetPatientDiseaseById), patientId, diseaseId)
}

// GetPatientDiseaseList mocks base method.
func (m *MockPatientDisease) GetPatientDiseaseList() ([]model.PatientDisease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientDiseaseList")
	ret0, _ := ret[0].([]model.PatientDisease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientDiseaseList indicates an expected call of GetPatientDiseaseList.
func (mr *MockPatientDiseaseMockRecorder) GetPatientDiseaseList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientDiseaseList", reflect.TypeOf((*MockPatientDisease)(nil).GetPatientDiseaseList))
}

// GetPatientDiseaseListByDisease mocks base method.
func (m *MockPatientDisease) GetPatientDiseaseListByDisease(diseaseId int) ([]model.PatientDisease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientDiseaseListByDisease", diseaseId)
	ret0, _ := ret[0].([]model.PatientDisease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientDiseaseListByDisease indicates an expected call of GetPatientDiseaseListByDisease.
func (mr *MockPatientDiseaseMockRecorder) GetPatientDiseaseListByDisease(diseaseId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientDiseaseListByDisease", reflect.TypeOf((*MockPatientDisease)(nil).GetPatientDiseaseListByDisease), diseaseId)
}

// GetPatientDiseaseListByPatient mocks base method.
func (m *MockPatientDisease) GetPatientDiseaseListByPatient(patientId int) ([]model.PatientDisease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientDiseaseListByPatient", patientId)
	ret0, _ := ret[0].([]model.PatientDisease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientDiseaseListByPatient indicates an expected call of GetPatientDiseaseListByPatient.
func (mr *MockPatientDiseaseMockRecorder) GetPatientDiseaseListByPatient(patientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientDiseaseListByPatient", reflect.TypeOf((*MockPatientDisease)(nil).GetPatientDiseaseListByPatient), patientId)
}

// UpdatePatientDisease mocks base method.
func (m *MockPatientDisease) UpdatePatientDisease(patientDisease model.PatientDisease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientDisease", patientDisease)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatientDisease indicates an expected call of UpdatePatientDisease.
func (mr *MockPatientDiseaseMockRecorder) UpdatePatientDisease(patientDisease any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientDisease", reflect.TypeOf((*MockPatientDisease)(nil).UpdatePatientDisease), patientDisease)
}

// MockProcedureBloodCount is a mock of ProcedureBloodCount interface.
type MockProcedureBloodCount struct {
	ctrl     *gomock.Controller
	recorder *MockProcedureBloodCountMockRecorder
}

// MockProcedureBloodCountMockRecorder is the mock recorder for MockProcedureBloodCount.
type MockProcedureBloodCountMockRecorder struct {
	mock *MockProcedureBloodCount
}

// NewMockProcedureBloodCount creates a new mock instance.
func NewMockProcedureBloodCount(ctrl *gomock.Controller) *MockProcedureBloodCount {
	mock := &MockProcedureBloodCount{ctrl: ctrl}
	mock.recorder = &MockProcedureBloodCountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcedureBloodCount) EXPECT() *MockProcedureBloodCountMockRecorder {
	return m.recorder
}

// CreateProcedureBloodCount mocks base method.
func (m *MockProcedureBloodCount) CreateProcedureBloodCount(procedureBloodCount model.ProcedureBloodCount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProcedureBloodCount", procedureBloodCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProcedureBloodCount indicates an expected call of CreateProcedureBloodCount.
func (mr *MockProcedureBloodCountMockRecorder) CreateProcedureBloodCount(procedureBloodCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProcedureBloodCount", reflect.TypeOf((*MockProcedureBloodCount)(nil).CreateProcedureBloodCount), procedureBloodCount)
}

// DeleteProcedureBloodCount mocks base method.
func (m *MockProcedureBloodCount) DeleteProcedureBloodCount(procedureId int, bloodCountId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProcedureBloodCount", procedureId, bloodCountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProcedureBloodCount indicates an expected call of DeleteProcedureBloodCount.
func (mr *MockProcedureBloodCountMockRecorder) DeleteProcedureBloodCount(procedureId, bloodCountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProcedureBloodCount", reflect.TypeOf((*MockProcedureBloodCount)(nil).DeleteProcedureBloodCount), procedureId, bloodCountId)
}

// GetProcedureBloodCountById mocks base method.
func (m *MockProcedureBloodCount) GetProcedureBloodCountById(procedureId int, bloodCountId string) (model.ProcedureBloodCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcedureBloodCountById", procedureId, bloodCountId)
	ret0, _ := ret[0].(model.ProcedureBloodCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcedureBloodCountById indicates an expected call of GetProcedureBloodCountById.
func (mr *MockProcedureBloodCountMockRecorder) GetProcedureBloodCountById(procedureId, bloodCountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcedureBloodCountById", reflect.TypeOf((*MockProcedureBloodCount)(nil).GetProcedureBloodCountById), procedureId, bloodCountId)
}

// GetProcedureBloodCountList mocks base method.
func (m *MockProcedureBloodCount) GetProcedureBloodCountList() ([]model.ProcedureBloodCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcedureBloodCountList")
	ret0, _ := ret[0].([]model.ProcedureBloodCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcedureBloodCountList indicates an expected call of GetProcedureBloodCountList.
func (mr *MockProcedureBloodCountMockRecorder) GetProcedureBloodCountList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcedureBloodCountList", reflect.TypeOf((*MockProcedureBloodCount)(nil).GetProcedureBloodCountList))
}

// GetProcedureBloodCountListByBloodCount mocks base method.
func (m *MockProcedureBloodCount) GetProcedureBloodCountListByBloodCount(bloodCountId string) ([]model.ProcedureBloodCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcedureBloodCountListByBloodCount", bloodCountId)
	ret0, _ := ret[0].([]model.ProcedureBloodCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcedureBloodCountListByBloodCount indicates an expected call of GetProcedureBloodCountListByBloodCount.
func (mr *MockProcedureBloodCountMockRecorder) GetProcedureBloodCountListByBloodCount(bloodCountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcedureBloodCountListByBloodCount", reflect.TypeOf((*MockProcedureBloodCount)(nil).GetProcedureBloodCountListByBloodCount), bloodCountId)
}

// GetProcedureBloodCountListByProcedure mocks base method.
func (m *MockProcedureBloodCount) GetProcedureBloodCountListByProcedure(procedureId int) ([]model.ProcedureBloodCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcedureBloodCountListByProcedure", procedureId)
	ret0, _ := ret[0].([]model.ProcedureBloodCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcedureBloodCountListByProcedure indicates an expected call of GetProcedureBloodCountListByProcedure.
func (mr *MockProcedureBloodCountMockRecorder) GetProcedureBloodCountListByProcedure(procedureId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcedureBloodCountListByProcedure", reflect.TypeOf((*MockProcedureBloodCount)(nil).GetProcedureBloodCountListByProcedure), procedureId)
}

// UpdateProcedureBloodCount mocks base method.
func (m *MockProcedureBloodCount) UpdateProcedureBloodCount(procedureBloodCount model.ProcedureBloodCount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProcedureBloodCount", procedureBloodCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProcedureBloodCount indicates an expected call of UpdateProcedureBloodCount.
func (mr *MockProcedureBloodCountMockRecorder) UpdateProcedureBloodCount(procedureBloodCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProcedureBloodCount", reflect.TypeOf((*MockProcedureBloodCount)(nil).UpdateProcedureBloodCount), procedureBloodCount)
}

// MockUnitMeasure is a mock of UnitMeasure interface.
type MockUnitMeasure struct {
	ctrl     *gomock.Controller
	recorder *MockUnitMeasureMockRecorder
}

// MockUnitMeasureMockRecorder is the mock recorder for MockUnitMeasure.
type MockUnitMeasureMockRecorder struct {
	mock *MockUnitMeasure
}

// NewMockUnitMeasure creates a new mock instance.
func NewMockUnitMeasure(ctrl *gomock.Controller) *MockUnitMeasure {
	mock := &MockUnitMeasure{ctrl: ctrl}
	mock.recorder = &MockUnitMeasureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitMeasure) EXPECT() *MockUnitMeasureMockRecorder {
	return m.recorder
}

// CreateUnitMeasure mocks base method.
func (m *MockUnitMeasure) CreateUnitMeasure(unitMeasure model.UnitMeasure) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnitMeasure", unitMeasure)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUnitMeasure indicates an expected call of CreateUnitMeasure.
func (mr *MockUnitMeasureMockRecorder) CreateUnitMeasure(unitMeasure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnitMeasure", reflect.TypeOf((*MockUnitMeasure)(nil).CreateUnitMeasure), unitMeasure)
}

// DeleteUnitMeasure mocks base method.
func (m *MockUnitMeasure) DeleteUnitMeasure(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnitMeasure", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnitMeasure indicates an expected call of DeleteUnitMeasure.
func (mr *MockUnitMeasureMockRecorder) DeleteUnitMeasure(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnitMeasure", reflect.TypeOf((*MockUnitMeasure)(nil).DeleteUnitMeasure), id)
}

// GetUnitMeasureById mocks base method.
func (m *MockUnitMeasure) GetUnitMeasureById(id string) (model.UnitMeasure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitMeasureById", id)
	ret0, _ := ret[0].(model.UnitMeasure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitMeasureById indicates an expected call of GetUnitMeasureById.
func (mr *MockUnitMeasureMockRecorder) GetUnitMeasureById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitMeasureById", reflect.TypeOf((*MockUnitMeasure)(nil).GetUnitMeasureById), id)
}

// GetUnitMeasureList mocks base method.
func (m *MockUnitMeasure) GetUnitMeasureList() ([]model.UnitMeasure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitMeasureList")
	ret0, _ := ret[0].([]model.UnitMeasure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitMeasureList indicates an expected call of GetUnitMeasureList.
func (mr *MockUnitMeasureMockRecorder) GetUnitMeasureList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitMeasureList", reflect.TypeOf((*MockUnitMeasure)(nil).GetUnitMeasureList))
}

// UpdateUnitMeasure mocks base method.
func (m *MockUnitMeasure) UpdateUnitMeasure(unitMeasure model.UnitMeasure) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnitMeasure", unitMeasure)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnitMeasure indicates an expected call of UpdateUnitMeasure.
func (mr *MockUnitMeasureMockRecorder) UpdateUnitMeasure(unitMeasure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnitMeasure", reflect.TypeOf((*MockUnitMeasure)(nil).UpdateUnitMeasure), unitMeasure)
}
